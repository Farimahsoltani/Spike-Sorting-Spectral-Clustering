def optimal_gradient_order(data, labels, n_clusters=4, gradient_order_range=range(0, 11)):
    all_accuracies = []
    all_silhouette_scores = []
    all_ch_scores = []
    gmm_original = GaussianMixture(n_components=n_clusters)
    gmm_original.fit(data)
    cluster_labels_original = gmm_original.predict(data)
    original_data_accuracy = calculate_accuracy(labels, cluster_labels_original+1)
    for order in gradient_order_range:
        warnings.simplefilter(action='ignore', category=UserWarning)
        TT = SpectralEmbedding(n_components=2,affinity='nearest_neighbors').fit_transform(apply_gradient(data,order))
        #affinity : {'nearest_neighbors', 'rbf', 'precomputed',                 'precomputed_nearest_neighbors'}
        #TT = UMAP(n_neighbors=100,init='random').fit_transform(apply_gradient(data,order))
        clustering = AgglomerativeClustering(n_clusters=5, affinity='deprecated', metric=None, memory=None, connectivity=None,
        compute_full_tree='auto', linkage='ward', distance_threshold=None, compute_distances=False).fit(TT)
        cluster_labels = clustering.labels_ +1
        # gmm = GaussianMixture(n_components=3)
        # gmm.fit(TT)
        # cluster_labels = gmm.predict(TT)+1
        # kmeans = KMeans(n_clusters=4,n_init=10)
        # kmeans.fit(TT)
        # cluster_labels = kmeans.labels_+1
        fig = plt.figure()
        plt.scatter(TT[:, 0], TT[:, 1], c=cluster_labels, cmap='viridis')
        plt.xlabel('PCA Component 1')
        plt.ylabel('PCA Component 2')
        plt.show()
        accuracy = calculate_accuracy(labels, cluster_labels)
        all_accuracies.append(accuracy)
        silhouette = silhouette_score(TT, cluster_labels)
        all_silhouette_scores.append(silhouette)
        ch_score = calinski_harabasz_score(TT, cluster_labels)
        all_ch_scores.append(ch_score)
        print(f"Accuracy for order {order} is {accuracy}, Silhouette Score is {silhouette}, Calinski-Harabasz Index is {ch_score}")
    return  all_accuracies, all_silhouette_scores, all_ch_scores

all_accuracies, all_silhouette_scores, all_ch_scores = optimal_gradient_order(spike_curve, spike_classes)
